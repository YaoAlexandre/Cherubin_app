@page "/contributions"
@using System.IO
@using FirstApp.Models
@using SQLite
@using System.Linq
@using System.Collections.Generic
<link href="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css" rel="stylesheet" />
<script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>

<h3>Cotisations</h3>

<div class="container">
    <div class="row mb-3">
        <div class="col-12 col-md-4">
            <input class="form-control" @bind="newContribution.Amount" placeholder="Amount" type="number" />
        </div>
        <div class="col-12 col-md-4">
            <select class="form-control" @bind="newContribution.MemberId">
                <option value="">Select Member</option>
                @foreach (var member in members)
                {
                    <option value="@member.Id">@member.FirstName @member.LastName</option>
                }
            </select>
        </div>
        <div class="col-12 col-md-4">
            <button class="btn btn-primary btn-block" @onclick="AddContribution">Add Contribution</button>
        </div>
    </div>
</div>

<table class="table table-striped table-responsive">
    <thead>
        <tr>
            <th>Member</th>
            <th>Amount</th>
            <th>Date</th>
            <th>Actions</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var contribution in contributions)
        {
            <tr>
                <td>@members.FirstOrDefault(m => m.Id == contribution.MemberId)?.FirstName @members.FirstOrDefault(m => m.Id == contribution.MemberId)?.LastName</td>
                <td>@contribution.Amount</td>
                <td>@contribution.Date.ToShortDateString()</td>
                <td>
                    <button class="btn btn-danger btn-sm" @onclick="() => DeleteContribution(contribution.Id)">
                        <i class="bi bi-trash"></i>
                    </button>
                </td>
            </tr>
        }
    </tbody>
</table>

@code {
    private List<Member> members = new List<Member>();
    private List<Contribution> contributions = new List<Contribution>();
    private Contribution newContribution = new Contribution();
    private string dbPath = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData), "members.db3");

    protected override void OnInitialized()
    {
        InitializeDatabase();
        LoadMembers();
        LoadContributions();
    }

    private void InitializeDatabase()
    {
        using (var connection = new SQLiteConnection(dbPath))
        {
            connection.CreateTable<Member>();
            connection.CreateTable<Contribution>();
        }
    }

    private void LoadMembers()
    {
        using (var connection = new SQLiteConnection(dbPath))
        {
            members = connection.Table<Member>().ToList();
        }
    }

    private void LoadContributions()
    {
        using (var connection = new SQLiteConnection(dbPath))
        {
            contributions = connection.Table<Contribution>().ToList();
        }
    }

    private void AddContribution()
    {
        if (newContribution.MemberId > 0 && newContribution.Amount > 0)
        {
            newContribution.Date = DateTime.Now; // Date d'ajout de la cotisation

            // Vous devrez définir la SessionId ici, par exemple :
            // newContribution.SessionId = GetSessionId(); // Remplacez GetSessionId() par la méthode pour obtenir l'ID de la session actuelle

            using (var connection = new SQLiteConnection(dbPath))
            {
                connection.Insert(newContribution);
            }
            LoadContributions();
            newContribution = new Contribution();
        }
        else
        {
            // Afficher un message d'erreur si les champs ne sont pas correctement remplis
        }
    }

    private void DeleteContribution(int contributionId)
    {
        using (var connection = new SQLiteConnection(dbPath))
        {
            var contributionToDelete = connection.Table<Contribution>().FirstOrDefault(c => c.Id == contributionId);
            if (contributionToDelete != null)
            {
                connection.Delete(contributionToDelete);
                LoadContributions();
            }
        }
    }
}
