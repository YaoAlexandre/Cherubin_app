@page "/members"
@using FirstApp.Models
@using FirstApp.IServices
@using SQLite
@inject IMemberService MemberService

<link href="https://cdn.jsdelivr.net/npm/bootstrap-icons/font/bootstrap-icons.css" rel="stylesheet">
<style>
    /* styles.css */
    .form-group {
        margin-bottom: 1rem;
    }

    .input-control {
        width: 100%;
        padding: 0.5rem;
        font-size: 1rem;
        border: 1px solid #ced4da;
        border-radius: 0.25rem;
    }

    .button-control {
        padding: 0.5rem 1rem;
        font-size: 1rem;
        border: none;
        border-radius: 0.25rem;
        background-color: #007bff;
        color: #fff;
        cursor: pointer;
        transition: background-color 0.3s ease;
    }

        .button-control:hover {
            background-color: #0056b3;
        }

    /* styles.css */
    .member-list {
        list-style-type: none;
        padding-left: 0;
    }

    .member-item {
        margin-bottom: 10px;
        padding: 10px;
        border: 1px solid #ccc;
        border-radius: 5px;
    }

    .delete-button {
        background-color: #dc3545;
        color: #fff;
        border: none;
        padding: 5px 10px;
        border-radius: 3px;
        cursor: pointer;
    }

        .delete-button:hover {
            background-color: #c82333;
        }


</style>

<h3>Members</h3>

@* <div class="form-group">
    <input class="input-control" @bind="newMember.FirstName" placeholder="First Name" />
</div>
<div class="form-group">
    <input class="input-control" @bind="newMember.LastName" placeholder="Last Name" />
</div>
<div class="form-group">
    <input class="input-control" @bind="newMember.Gender" placeholder="Gender" />
</div>
<div class="form-group">
    <input class="input-control" @bind="newMember.PhoneNumber" placeholder="Phone Number" />
</div>
<div class="form-group">
    <input class="input-control" @bind="newMember.Role" placeholder="Role" />
</div>
<button class="button-control" @onclick="AddMember">Add Member</button>
 *@


@if (!showAddMemberForm)
{
    <button class="btn btn-primary mb-3" @onclick="ShowAddMemberForm">Add Member</button>

    <table class="table table-striped">
        <thead>
            <tr>
                <th>Nom</th>
                <th>Prénoms</th>
                <th>Role</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var member in members)
            {
                <tr>
                    <td>@member.LastName</td>
                    <td>@member.FirstName</td>
                    <td>@member.Role</td>
                    <td>
                        <button class="btn btn-primary btn-sm" @onclick="() => EditMember(member)">
                            <i class="bi bi-pencil"></i>
                        </button>
                        <button class="btn btn-danger btn-sm" @onclick="() => DeleteMember(member.Id)">
                            <i class="bi bi-trash"></i>
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
else
{
    <!-- Formulaire d'ajout de membre -->
}


@if (showAddMemberForm)
{
    <div class="modal fade show" style="display: block;" tabindex="-1" role="dialog">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Add Member</h5>
                    <button type="button" class="close" @onclick="HideAddMemberForm">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <form>
                        <div class="form-group">
                            <input class="form-control" @bind="newMember.FirstName" placeholder="First Name" />
                        </div>
                        <div class="form-group">
                            <input class="form-control" @bind="newMember.LastName" placeholder="Last Name" />
                        </div>
                        <div class="form-group">
                            <input class="form-control" @bind="newMember.Role" placeholder="Role" />
                        </div>
                        @if (!string.IsNullOrEmpty(errorMessage))
                        {
                            <div class="alert alert-danger" role="alert">
                                @errorMessage
                            </div>
                        }
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-primary" @onclick="AddMember">Save</button>
                    <button type="button" class="btn btn-secondary" @onclick="HideAddMemberForm">Cancel</button>
                </div>
            </div>
        </div>
    </div>
}





@code {
    private List<Member> members = new List<Member>();
    private Member newMember = new Member();
    private Member editedMember;
    private bool showAddMemberForm = false;
    private string dbPath = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData), "members.db3");
    private string errorMessage;

    protected override void OnInitialized()
    {
        InitializeDatabase();
        LoadMembers();
    }

    private void InitializeDatabase()
    {
        using (var connection = new SQLiteConnection(dbPath))
        {
            connection.CreateTable<Member>();
        }
    }

    private void LoadMembers()
    {
        using (var connection = new SQLiteConnection(dbPath))
        {
            members = connection.Table<Member>().ToList();
        }
    }

    private void ShowAddMemberForm()
    {
        newMember = new Member();
        showAddMemberForm = true;
    }

    private void HideAddMemberForm()
    {
        showAddMemberForm = false;
        newMember = new Member();
        editedMember = null;
        errorMessage = null;
    }

    private void AddMember()
    {
        if (!string.IsNullOrEmpty(newMember.FirstName) && !string.IsNullOrEmpty(newMember.LastName) && !string.IsNullOrEmpty(newMember.Role))
        {
            using (var connection = new SQLiteConnection(dbPath))
            {
                if (editedMember == null)
                {
                    connection.Insert(newMember);
                }
                else
                {
                    editedMember.FirstName = newMember.FirstName;
                    editedMember.LastName = newMember.LastName;
                    editedMember.Role = newMember.Role;
                    connection.Update(editedMember);
                }
            }

            LoadMembers();
            HideAddMemberForm();
        }
        else
        {
            errorMessage = "All fields are required.";
        }
    }

    private void EditMember(Member member)
    {
        editedMember = member;
        newMember.FirstName = member.FirstName;
        newMember.LastName = member.LastName;
        newMember.Role = member.Role;
        showAddMemberForm = true;
    }

    private void DeleteMember(int memberId)
    {
        using (var connection = new SQLiteConnection(dbPath))
        {
            var memberToDelete = connection.Table<Member>().FirstOrDefault(m => m.Id == memberId);
            if (memberToDelete != null)
            {
                connection.Delete(memberToDelete);
                LoadMembers();
            }
        }
    }
}

